// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6016.Frida.commands;

import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6016.Frida.subsystems.*;
import org.usfirst.frc6016.Frida.commands.DriveStraight;
import org.usfirst.frc6016.Frida.commands.Turn;

/**
 *
 */
public class ChickenDinner extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public ChickenDinner(String [] commands) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    	//this.process(commands);
    	
        	SmartDashboard.putString("Process", "Chicken Dinner");
            for(int i=0; i<commands.length; i++) {
            	if(i%2==0) {
            		
            		//new DriveStraight(Double.parseDouble(commands[i])).start();
            		
            		addSequential(new DriveTurn(Double.parseDouble(commands[i]),0));
            		System.out.println("i is " +  Double.parseDouble(commands[i]));
            		//System.out.println("Drive Distance Run");
            		SmartDashboard.putString("DriveStraight", "Run");
            	} else {
            		
            		//addSequential(new Turn(Double.parseDouble(commands[i])));
            		addSequential(new DriveTurn(0, Double.parseDouble(commands[i])));
            		//System.out.println("TurnAngle Run");
            		SmartDashboard.putString("TurnAngle", "Run");
            	}
            }
            return;
         // end method*/
    	//addSequential(new DriveTurn(Double.parseDouble(commands[0]),0));
    	//addSequential(new DriveTurn(25,0));
    	//addSequential(new DriveStraight(25));
    	//addSequential(new DriveTurn(Double.parseDouble(commands[1]),0));
 
    }

	
    
    /*public void process(String [] commands) {
    	SmartDashboard.putString("Process", "Chicken Dinner");
        for(int i=0; i<commands.length; i++) {
        	if(i%2==0) {
        		
        		//new DriveStraight(Double.parseDouble(commands[i])).start();
        		//addSequential(new DriveStraight(Double.parseDouble(commands[i])));
        		addSequential(new DriveTurn(Double.parseDouble(commands[i]),0));
        		System.out.println("i is " +  Double.parseDouble(commands[i]) );
        		System.out.println("Drive Distance Run");
        		SmartDashboard.putString("DriveStraight", "Run");
        	} else {
        		
        		addSequential(new Turn(Double.parseDouble(commands[i])));
        		System.out.println("TurnAngle Run");
        		SmartDashboard.putString("TurnAngle", "Run");
        	}
        }
        return;
    } // end method*/
    
	
    
}
