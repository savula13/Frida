// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6016.Frida.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc6016.Frida.Robot;
import org.usfirst.frc6016.Frida.RobotMap;
import org.usfirst.frc6016.Frida.commands.ChickenDinner;

/**
 *
 */
public class AutonomousCommand extends Command {
	
	int driverstation;
	ChickenDinner ex;
	/*String[] cmdA = {"14", "90", "4", "0", "0", "0"}; //near left
	//String[] cmdA = {"25", "0", "0", "0", "0", "0"};
	String[] cmdB = {"40", "90", "4", "0", "0", "0"}; //far left
	String[] cmdC = {"19", "90", "12.5", "90", "3", "0"}; // right from left
	String[] cmdD = {"5", "-90", "6", "90", "7", "0"}; // left from middle
	String[] cmdE = {"5", "90", "6", "-90", "7", "0"}; // right from middle
	String[] cmdF = {"14", "-90", "4", "0", "0", "0"}; // near right
	String[] cmdG = {"40", "-90", "4", "0", "0", "0"}; // far right
	String[] cmdH = {"19", "-90", "12.5", "-90", "3", "0"}; // left from right*/
	
	String[] cmdA = {"168", "90", "48", "0", "0", "0"}; //near left
	//String[] cmdA = {"25", "0", "0", "0", "0", "0"};
	String[] cmdB = {"40", "90", "4", "0", "0", "0"}; //far left
	String[] cmdC = {"228", "90", "150", "90", "36", "0"}; // right from left
	String[] cmdD = {"60", "-90", "72", "90", "84", "0"}; // left from middle
	String[] cmdE = {"60", "90", "72", "-90", "84", "0"}; // right from middle
	String[] cmdF = {"168", "-90", "48", "0", "0", "0"}; // near right
	String[] cmdG = {"40", "-90", "4", "0", "0", "0"}; // far right
	String[] cmdH = {"228", "-90", "150", "-90", "36", "0"}; // left from right

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousCommand(int n) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	
    	driverstation = n;
    	System.out.println("begin chicken dinner");
    	//ex = new ChickenDinner();
    	//System.out.println(ex.toString());
    	System.out.println("end chicken dinner");
    	
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
        	String gameData;
    		gameData = DriverStation.getInstance().getGameSpecificMessage();
        	if(gameData.length() > 0) {
    		
        		//new ChickenDinner(cmdA);
        	switch(driverstation) {
        	case 0:
        	{
        		System.out.println("Driver Station: Left");
        		SmartDashboard.putString("Driver Station", "Left A");
        		SmartDashboard.putString("gamedata", gameData);
        		if(gameData.charAt(0) == 'L') {
        			System.out.println("Command A (Near Left)");
        			SmartDashboard.putString("Command", "A1");
        			//SmartDashboard.putString("toString", ex.toString());
        			//System.out.print("To String: " + ex.toString());
        			//ex.process(cmdA);
        			//new ChickenDinner(cmdA);
        			Scheduler.getInstance().add(new ChickenDinner(cmdA));
        			SmartDashboard.putString("Process", "Done");
        		} else if(gameData.charAt(1) == 'L' && gameData.charAt(2) == 'L') {
        			System.out.println("Command B (Far Left)");
        			Scheduler.getInstance().add(new ChickenDinner(cmdB));
        		} else {
        			System.out.println("Command C");
        			Scheduler.getInstance().add(new ChickenDinner(cmdC));
        		}
        		
        		// end if statement of left
        		break;
    	
        	} // end case
        	
        	case 1:
        	{
        		System.out.println("Driver Station: Middle");
        		if(gameData.charAt(0) == 'L') {
        			System.out.println("Command D (Left)");
        			Scheduler.getInstance().add(new ChickenDinner(cmdD));
        		} else {
        			System.out.println("Command E (Right)");
        			Scheduler.getInstance().add(new ChickenDinner(cmdE));
        		}
        		
        		// end if
        	break;
        	// end case
        	}
        	case 2:
        	{
        		System.out.println("Driver Station: Right");
        	
        		if(gameData.charAt(0) == 'R') {
        			System.out.println("Command F (Near Right)");
        			Scheduler.getInstance().add(new ChickenDinner(cmdF));
        		} else if(gameData.charAt(1) == 'R' && gameData.charAt(2) == 'R') {
        			System.out.println("Command G (Far Right)");
        			Scheduler.getInstance().add(new ChickenDinner(cmdG));
        		} else {
        			System.out.println("Command H ");
        			Scheduler.getInstance().add(new ChickenDinner(cmdH));
        		}
        		
        		// end if
        	break;
        	}// end case
        	
        	
        	default:
        	{
        		Robot.drivetrain.goForward(0.5);
        	}
        	
        	} // end switch
        	
        	} // end if statement length
        	
    }
        	

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	/*String gameData;
		gameData = DriverStation.getInstance().getGameSpecificMessage();
    	if(gameData.length() > 0) {
		
    		//new ChickenDinner(cmdA);
    	switch(driverstation) {
    	case 0:
    	{
    		System.out.println("Driver Station: Left");
    		SmartDashboard.putString("Driver Station", "Left A");
    		SmartDashboard.putString("gamedata", gameData);
    		if(gameData.charAt(0) == 'L') {
    			System.out.println("Command A (Near Left)");
    			SmartDashboard.putString("Command", "A1");
    			//SmartDashboard.putString("toString", ex.toString());
    			//System.out.print("To String: " + ex.toString());
    			//ex.process(cmdA);
    			new ChickenDinner(cmdA);
    			SmartDashboard.putString("Process", "Done");
    		/*} else if(gameData.charAt(1) == 'L' && gameData.charAt(2) == 'L') {
    			System.out.println("Command B (Far Left)");
    			//ex.process(cmdB);
    		} else {
    			System.out.println("Command C");
    			//ex.process(cmdC);
    		}
    		
    		// end if
    	break;
    	}// end case
    	}
    	}*/
    }
   // }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	Robot.drivetrain.stop();
    	return;
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    	return;
    }
 
}
